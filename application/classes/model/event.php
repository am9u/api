<?php defined('SYSPATH') or die('No direct script access.');

/**
 * @TODO: add timezone support
 * @TODO: refactor Model_Event::check(), Model_Event::values() and Model_Event::save() to match functionality in Model_Venue
 */
class Model_Event extends ORM 
{
    protected $_db = 'event_warehouse';

    // relationships
    protected $_belongs_to = array('venue' => array());

    protected $_has_many = array(

        'groups' => array('through' => 'events_groups'),

        /*
        // experimental tag mapping
        'tags' => array('through' => 'tagmaps'),
        //*/
    );

    // validation
    protected $_rules = array(
        'name' => array('not_empty' => array()),
        'datetime' => array('not_empty' => array()),
        'venue_id' => array('not_empty' => array()),
    );

    /*
    // placeholder for establishing has_many relationship to tags
    private $_tags = null;
    //*/

    /**
     * Creates tag relationships and sets values
     */
    public function values($values)
    {
        /*
        if(isset($values['tags']) AND is_array($values['tags']))
        {
           foreach($values['tags'] as $tag)
           {
                if(is_numeric($tag))
                {
                    $model = ORM::factory('tag', intval($tag));
                    if($model->loaded())
                    {
                        if($this->_tags === NULL)
                        {
                            $this->_tags = array();
                        }
                        array_push($this->_tags, $model);
                    }
                }
                else
                {
                    $model = ORM::factory('tag', array('name' => $tag));
                    if( ! $model->loaded())
                    {
                        $model->values(array('name' => $tag))->save();
                    }
                    if($this->_tags === NULL)
                    {
                        $this->_tags = array();
                    }
                    array_push($this->_tags, $model);
                }
           }
        }
        //*/
        return parent::values($values);
    }

    /**
     * Adds group association
     */

    public function add_to_group($group_id, $role_id = NULL)
    {
        $group = ORM::factory('group', $group_id);
        $this->add('groups', $group);

        if ($role_id !== NULL)
        {
            $this->add_group_role($group->id, $role_id);
        }
    }

    public function add_group_role($group_id, $role_id)
    {
        $event_group_role = ORM::factory('eventGroupRole')
                                ->values(array(
                                        'event_id' => $this->id, 
                                        'group_id' => $group_id, 
                                        'role_id'  => $role_id, 
                                    ))
                                ->save(); 
    }

    public function make_public()
    {
        $login_role = ORM::factory('role', array('name' => 'login'));
        $this->add_group_role(0, $login_role);
    }

    public function privacy_settings()
    {
        $privacy_settings = ORM::factory('eventGroupRole');

        $groups = $this->groups->find_all();

        $privacy_settings->or_where_open();
        $privacy_settings->or_where('group_id', '=', 0); // find public events

        foreach($groups as $group)
        {
            $privacy_settings->or_where('group_id', '=', $group->id);
        }
        $privacy_settings->or_where_close();

        $privacy_settings->and_where_open();
        $privacy_settings->and_where('event_id', '=', $this->id);
        $privacy_settings->and_where_close();


        
        return $privacy_settings;
    }

    /**
     * Creates and associates a unique event tag for this event
     */
    public function save()
    {
        parent::save();

        /*
        // if event is created (not updated), generate it's unique event tag
        if($this->tags->where('name', '=', $this->name.': '.$this->id)->count_all() < 1) {
            $core_tag_name = ucfirst($this->_object_name);

            $event_parent_tag = ORM::factory('tag')
                                    ->core_tag($core_tag_name)
                                    ->find();

            // autocreate internal tag for this event. eventually we should tagname to be event.name_event.date, ie: A Fan Ti_2010.11.01... or something like that
            $event_tag = ORM::factory('tag')
                            ->values(array('name' => $this->name.': '.$this->datetime, 'parent_id' => $event_parent_tag->id))
                            ->save();

            // associate autogenerated tag to event
            // $this->add('tags', $event_parent_tag); 
            $this->add('tags', $event_tag); 
        }

        // associate tags
        if($this->_tags !== NULL)
        {
            foreach($this->_tags as $tag)
            {
                $this->add('tags', $tag);
            }
            $this->_tags = null;
        }
        //*/
    }
}


